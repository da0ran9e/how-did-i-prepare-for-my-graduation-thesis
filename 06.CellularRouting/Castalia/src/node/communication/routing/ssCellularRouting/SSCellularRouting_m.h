//
// Generated file, do not edit! Created by nedtool 5.6 from node/communication/routing/ssCellularRouting/SSCellularRouting.msg.
//

#ifndef __SSCELLULARROUTING_M_H
#define __SSCELLULARROUTING_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "node/communication/routing/RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>node/communication/routing/ssCellularRouting/SSCellularRouting.msg:7</tt> by nedtool.
 * <pre>
 * enum SSCellularRoutingPacketType
 * {
 *     HELLO_PACKET = 0;
 *     CL_ANNOUNCEMENT = 1;
 *     CL_CONFIRMATION = 2;
 *     BS_UPDATE_PACKET = 3;
 *     LINK_REQUEST = 4;
 *     LINK_ACK = 5;
 *     LINK_ESTABLISHED = 6;
 *     INTRA_CELL_ROUTING_UPDATE = 7;
 *     CL_COMMAND_PACKET = 8;
 *     NCL_CONFIRM_PACKET = 9;
 *     ROUTING_TREE_UPDATE_PACKET = 10;
 *     CH_ANNOUNCEMENT_PACKET = 11;
 *     DATA_PACKET = 12;
 *     ANNOUNCE_CELL_HOP = 13;
 *     SENSOR_DATA = 14;
 * }
 * </pre>
 */
enum SSCellularRoutingPacketType {
    HELLO_PACKET = 0,
    CL_ANNOUNCEMENT = 1,
    CL_CONFIRMATION = 2,
    BS_UPDATE_PACKET = 3,
    LINK_REQUEST = 4,
    LINK_ACK = 5,
    LINK_ESTABLISHED = 6,
    INTRA_CELL_ROUTING_UPDATE = 7,
    CL_COMMAND_PACKET = 8,
    NCL_CONFIRM_PACKET = 9,
    ROUTING_TREE_UPDATE_PACKET = 10,
    CH_ANNOUNCEMENT_PACKET = 11,
    DATA_PACKET = 12,
    ANNOUNCE_CELL_HOP = 13,
    SENSOR_DATA = 14
};

/**
 * Struct generated from node/communication/routing/ssCellularRouting/SSCellularRouting.msg:25 by nedtool.
 */
struct SSCHAnnouncementInfo
{
    SSCHAnnouncementInfo();
    int chId;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const SSCHAnnouncementInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, SSCHAnnouncementInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SSCHAnnouncementInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SSCHAnnouncementInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/ssCellularRouting/SSCellularRouting.msg:29 by nedtool.
 */
struct SSCellHopAnnouncementInfo
{
    SSCellHopAnnouncementInfo();
    int nextCell;
    int cellPath[1000];
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const SSCellHopAnnouncementInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, SSCellHopAnnouncementInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SSCellHopAnnouncementInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SSCellHopAnnouncementInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/ssCellularRouting/SSCellularRouting.msg:34 by nedtool.
 */
struct SSSensorInfo
{
    SSSensorInfo();
    int destinationCH;
    int dataId;
    int sensorId;
    int hopCount;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const SSSensorInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, SSSensorInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SSSensorInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SSSensorInfo& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>node/communication/routing/ssCellularRouting/SSCellularRouting.msg:41</tt> by nedtool.
 * <pre>
 * packet SSCellularRoutingPacket extends RoutingPacket
 * {
 *     int packetType \@enum(SSCellularRoutingPacketType);
 *     int clusterHead;
 *     int cellSent;
 *     int cellNext;
 *     int cellNextNext;
 *     int cellSource;
 *     int cellDestination;
 *     int cellHopCount;
 *     int cellPath[1000];
 *     int cellPathToDestination[1000];
 *     int ttl;
 * 
 *     SSSensorInfo sensorData;
 *     SSCHAnnouncementInfo cHAnnouncementData;
 *     SSCellHopAnnouncementInfo sSCellHopAnnouncementData;
 * }
 * </pre>
 */
class SSCellularRoutingPacket : public ::RoutingPacket
{
  protected:
    int packetType;
    int clusterHead;
    int cellSent;
    int cellNext;
    int cellNextNext;
    int cellSource;
    int cellDestination;
    int cellHopCount;
    int cellPath[1000];
    int cellPathToDestination[1000];
    int ttl;
    SSSensorInfo sensorData;
    SSCHAnnouncementInfo cHAnnouncementData;
    SSCellHopAnnouncementInfo sSCellHopAnnouncementData;

  private:
    void copy(const SSCellularRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SSCellularRoutingPacket&);

  public:
    SSCellularRoutingPacket(const char *name=nullptr, short kind=0);
    SSCellularRoutingPacket(const SSCellularRoutingPacket& other);
    virtual ~SSCellularRoutingPacket();
    SSCellularRoutingPacket& operator=(const SSCellularRoutingPacket& other);
    virtual SSCellularRoutingPacket *dup() const override {return new SSCellularRoutingPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPacketType() const;
    virtual void setPacketType(int packetType);
    virtual int getClusterHead() const;
    virtual void setClusterHead(int clusterHead);
    virtual int getCellSent() const;
    virtual void setCellSent(int cellSent);
    virtual int getCellNext() const;
    virtual void setCellNext(int cellNext);
    virtual int getCellNextNext() const;
    virtual void setCellNextNext(int cellNextNext);
    virtual int getCellSource() const;
    virtual void setCellSource(int cellSource);
    virtual int getCellDestination() const;
    virtual void setCellDestination(int cellDestination);
    virtual int getCellHopCount() const;
    virtual void setCellHopCount(int cellHopCount);
    virtual unsigned int getCellPathArraySize() const;
    virtual int getCellPath(unsigned int k) const;
    virtual void setCellPath(unsigned int k, int cellPath);
    virtual unsigned int getCellPathToDestinationArraySize() const;
    virtual int getCellPathToDestination(unsigned int k) const;
    virtual void setCellPathToDestination(unsigned int k, int cellPathToDestination);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual SSSensorInfo& getSensorData();
    virtual const SSSensorInfo& getSensorData() const {return const_cast<SSCellularRoutingPacket*>(this)->getSensorData();}
    virtual void setSensorData(const SSSensorInfo& sensorData);
    virtual SSCHAnnouncementInfo& getCHAnnouncementData();
    virtual const SSCHAnnouncementInfo& getCHAnnouncementData() const {return const_cast<SSCellularRoutingPacket*>(this)->getCHAnnouncementData();}
    virtual void setCHAnnouncementData(const SSCHAnnouncementInfo& cHAnnouncementData);
    virtual SSCellHopAnnouncementInfo& getSSCellHopAnnouncementData();
    virtual const SSCellHopAnnouncementInfo& getSSCellHopAnnouncementData() const {return const_cast<SSCellularRoutingPacket*>(this)->getSSCellHopAnnouncementData();}
    virtual void setSSCellHopAnnouncementData(const SSCellHopAnnouncementInfo& sSCellHopAnnouncementData);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SSCellularRoutingPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SSCellularRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __SSCELLULARROUTING_M_H

