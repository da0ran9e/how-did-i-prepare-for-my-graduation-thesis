//
// Generated file, do not edit! Created by nedtool 5.6 from node/communication/routing/gstebRouting/GSTEBRouting.msg.
//

#ifndef __GSTEBROUTING_M_H
#define __GSTEBROUTING_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "node/communication/routing/RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>node/communication/routing/gstebRouting/GSTEBRouting.msg:7</tt> by nedtool.
 * <pre>
 * enum GSTEBRoutingPacketType
 * {
 *     BS_BROADCAST_PACKET = 0;
 *     SENSOR_BROADCAST_PACKET = 1;
 *     NEIGHBOR_BROADCAST_PACKET = 2;
 *     NODE_INFO_PACKET = 3;
 *     NODE_CONTROL_PACKET = 4;
 * }
 * </pre>
 */
enum GSTEBRoutingPacketType {
    BS_BROADCAST_PACKET = 0,
    SENSOR_BROADCAST_PACKET = 1,
    NEIGHBOR_BROADCAST_PACKET = 2,
    NODE_INFO_PACKET = 3,
    NODE_CONTROL_PACKET = 4
};

/**
 * Struct generated from node/communication/routing/gstebRouting/GSTEBRouting.msg:15 by nedtool.
 */
struct GSTEBBSBroadcastInfo
{
    GSTEBBSBroadcastInfo();
    int senderX;
    int senderY;
    int x;
    int y;
    double timeStart;
    int numNodes;
    int sinkId;
    double timeSlot;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const GSTEBBSBroadcastInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, GSTEBBSBroadcastInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GSTEBBSBroadcastInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GSTEBBSBroadcastInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/gstebRouting/GSTEBRouting.msg:26 by nedtool.
 */
struct GSTEBSensorBroadcastInfo
{
    GSTEBSensorBroadcastInfo();
    int nX;
    int nY;
    double nEL;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const GSTEBSensorBroadcastInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, GSTEBSensorBroadcastInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GSTEBSensorBroadcastInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GSTEBSensorBroadcastInfo& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>node/communication/routing/gstebRouting/GSTEBRouting.msg:32</tt> by nedtool.
 * <pre>
 * packet GSTEBRoutingPacket extends RoutingPacket
 * {
 *     int packetType \@enum(GSTEBRoutingPacketType);
 * 
 *     int ttl;
 * 
 *     GSTEBBSBroadcastInfo bSBroadcastData;
 *     GSTEBSensorBroadcastInfo sensorBroadcastData;
 * 
 *     int nNumber;
 *     int nId[500];
 *     int nXCoor[500];
 *     int nYCoor[500];
 *     int nEL[500];
 * 
 *     int nnNumber;
 *     int nNeighbor[500];
 *     int nnId[500];
 *     int nnXCoor[500];
 *     int nnYCoor[500];
 *     int nnEL[500];
 * 
 *     int routingTree[500];
 * }
 * </pre>
 */
class GSTEBRoutingPacket : public ::RoutingPacket
{
  protected:
    int packetType;
    int ttl;
    GSTEBBSBroadcastInfo bSBroadcastData;
    GSTEBSensorBroadcastInfo sensorBroadcastData;
    int nNumber;
    int nId[500];
    int nXCoor[500];
    int nYCoor[500];
    int nEL[500];
    int nnNumber;
    int nNeighbor[500];
    int nnId[500];
    int nnXCoor[500];
    int nnYCoor[500];
    int nnEL[500];
    int routingTree[500];

  private:
    void copy(const GSTEBRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GSTEBRoutingPacket&);

  public:
    GSTEBRoutingPacket(const char *name=nullptr, short kind=0);
    GSTEBRoutingPacket(const GSTEBRoutingPacket& other);
    virtual ~GSTEBRoutingPacket();
    GSTEBRoutingPacket& operator=(const GSTEBRoutingPacket& other);
    virtual GSTEBRoutingPacket *dup() const override {return new GSTEBRoutingPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPacketType() const;
    virtual void setPacketType(int packetType);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual GSTEBBSBroadcastInfo& getBSBroadcastData();
    virtual const GSTEBBSBroadcastInfo& getBSBroadcastData() const {return const_cast<GSTEBRoutingPacket*>(this)->getBSBroadcastData();}
    virtual void setBSBroadcastData(const GSTEBBSBroadcastInfo& bSBroadcastData);
    virtual GSTEBSensorBroadcastInfo& getSensorBroadcastData();
    virtual const GSTEBSensorBroadcastInfo& getSensorBroadcastData() const {return const_cast<GSTEBRoutingPacket*>(this)->getSensorBroadcastData();}
    virtual void setSensorBroadcastData(const GSTEBSensorBroadcastInfo& sensorBroadcastData);
    virtual int getNNumber() const;
    virtual void setNNumber(int nNumber);
    virtual unsigned int getNIdArraySize() const;
    virtual int getNId(unsigned int k) const;
    virtual void setNId(unsigned int k, int nId);
    virtual unsigned int getNXCoorArraySize() const;
    virtual int getNXCoor(unsigned int k) const;
    virtual void setNXCoor(unsigned int k, int nXCoor);
    virtual unsigned int getNYCoorArraySize() const;
    virtual int getNYCoor(unsigned int k) const;
    virtual void setNYCoor(unsigned int k, int nYCoor);
    virtual unsigned int getNELArraySize() const;
    virtual int getNEL(unsigned int k) const;
    virtual void setNEL(unsigned int k, int nEL);
    virtual int getNnNumber() const;
    virtual void setNnNumber(int nnNumber);
    virtual unsigned int getNNeighborArraySize() const;
    virtual int getNNeighbor(unsigned int k) const;
    virtual void setNNeighbor(unsigned int k, int nNeighbor);
    virtual unsigned int getNnIdArraySize() const;
    virtual int getNnId(unsigned int k) const;
    virtual void setNnId(unsigned int k, int nnId);
    virtual unsigned int getNnXCoorArraySize() const;
    virtual int getNnXCoor(unsigned int k) const;
    virtual void setNnXCoor(unsigned int k, int nnXCoor);
    virtual unsigned int getNnYCoorArraySize() const;
    virtual int getNnYCoor(unsigned int k) const;
    virtual void setNnYCoor(unsigned int k, int nnYCoor);
    virtual unsigned int getNnELArraySize() const;
    virtual int getNnEL(unsigned int k) const;
    virtual void setNnEL(unsigned int k, int nnEL);
    virtual unsigned int getRoutingTreeArraySize() const;
    virtual int getRoutingTree(unsigned int k) const;
    virtual void setRoutingTree(unsigned int k, int routingTree);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GSTEBRoutingPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GSTEBRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __GSTEBROUTING_M_H

