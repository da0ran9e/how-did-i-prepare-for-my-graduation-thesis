//
// Generated file, do not edit! Created by nedtool 5.6 from node/communication/routing/CellularRouting/CellularRoutingPacket.msg.
//

#ifndef __CELLULARROUTINGPACKET_M_H
#define __CELLULARROUTINGPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "node/communication/routing/RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>node/communication/routing/CellularRouting/CellularRoutingPacket.msg:7</tt> by nedtool.
 * <pre>
 * enum CellularRoutingPacketType
 * {
 *     HELLO_PACKET = 0;
 *     CL_ANNOUNCEMENT = 1;
 *     CL_CONFIRMATION = 2;
 *     BS_UPDATE_PACKET = 3;
 *     LINK_REQUEST = 4;
 *     LINK_ACK = 5;
 *     LINK_ESTABLISHED = 6;
 *     INTRA_CELL_ROUTING_UPDATE = 7;
 *     CL_COMMAND_PACKET = 8;
 *     NCL_CONFIRM_PACKET = 9;
 *     ROUTING_TREE_UPDATE_PACKET = 10;
 *     CH_ANNOUNCEMENT_PACKET = 11;
 *     DATA_PACKET = 12;
 *     ANNOUNCE_CELL_HOP = 13;
 *     SENSOR_DATA = 14;
 * }
 * </pre>
 */
enum CellularRoutingPacketType {
    HELLO_PACKET = 0,
    CL_ANNOUNCEMENT = 1,
    CL_CONFIRMATION = 2,
    BS_UPDATE_PACKET = 3,
    LINK_REQUEST = 4,
    LINK_ACK = 5,
    LINK_ESTABLISHED = 6,
    INTRA_CELL_ROUTING_UPDATE = 7,
    CL_COMMAND_PACKET = 8,
    NCL_CONFIRM_PACKET = 9,
    ROUTING_TREE_UPDATE_PACKET = 10,
    CH_ANNOUNCEMENT_PACKET = 11,
    DATA_PACKET = 12,
    ANNOUNCE_CELL_HOP = 13,
    SENSOR_DATA = 14
};

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:25 by nedtool.
 */
struct HelloInfo
{
    HelloInfo();
    int cellId;
    int color;
    double energyLevel;
    double x;
    double y;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const HelloInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, HelloInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HelloInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HelloInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:33 by nedtool.
 */
struct CLAnnouncementInfo
{
    CLAnnouncementInfo();
    int cellId;
    int color;
    double fitnessScore;
    double x;
    double y;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const CLAnnouncementInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, CLAnnouncementInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CLAnnouncementInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CLAnnouncementInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:41 by nedtool.
 */
struct NeighborInfo
{
    NeighborInfo();
    int nodeId;
    double x;
    double y;
    int cellId;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const NeighborInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, NeighborInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NeighborInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NeighborInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:48 by nedtool.
 */
struct NodeInfo
{
    NodeInfo();
    int nodeId;
    double x;
    double y;
    double energyLevel;
    NeighborInfo neighbors[20];
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const NodeInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, NodeInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NodeInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NodeInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:56 by nedtool.
 */
struct LinkRequestInfo
{
    LinkRequestInfo();
    int source_cell_id;
    int source_cgw_id;
    int target_ngw_id;
    int target_cell_id;
    int final_ch_id;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const LinkRequestInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, LinkRequestInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LinkRequestInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LinkRequestInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:64 by nedtool.
 */
struct CLCommandInfo
{
    CLCommandInfo();
    int source_cgw_id;
    int target_ngw_id;
    int target_cell_id;
    int final_ch_id;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const CLCommandInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, CLCommandInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CLCommandInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CLCommandInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:71 by nedtool.
 */
struct NCLConfirmInfo
{
    NCLConfirmInfo();
    int cgw_id;
    int ngw_id;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const NCLConfirmInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, NCLConfirmInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NCLConfirmInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NCLConfirmInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:76 by nedtool.
 */
struct RoutingUpdateInfo
{
    RoutingUpdateInfo();
    int nodeId;
    int fromCell;
    int toCell;
    int nextHop;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const RoutingUpdateInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, RoutingUpdateInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RoutingUpdateInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RoutingUpdateInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:83 by nedtool.
 */
struct CHAnnouncementInfo
{
    CHAnnouncementInfo();
    int chId;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const CHAnnouncementInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, CHAnnouncementInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CHAnnouncementInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CHAnnouncementInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:87 by nedtool.
 */
struct CellHopAnnouncementInfo
{
    CellHopAnnouncementInfo();
    int nextCell;
    int cellPath[100];
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const CellHopAnnouncementInfo& a);
void __doUnpacking(omnetpp::cCommBuffer *b, CellHopAnnouncementInfo& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CellHopAnnouncementInfo& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CellHopAnnouncementInfo& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from node/communication/routing/CellularRouting/CellularRoutingPacket.msg:92 by nedtool.
 */
struct SensorData
{
    SensorData();
    int destinationCH;
    int dataId;
    int sensorId;
    int hopCount;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const SensorData& a);
void __doUnpacking(omnetpp::cCommBuffer *b, SensorData& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SensorData& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SensorData& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>node/communication/routing/CellularRouting/CellularRoutingPacket.msg:99</tt> by nedtool.
 * <pre>
 * packet CellularRoutingPacket extends RoutingPacket
 * {
 *     int packetType \@enum(CellularRoutingPacketType);
 * 
 *     int clusterHead;
 *     int cellSent;
 *     int cellNext;
 *     int cellNextNext;
 *     int cellSource;
 *     int cellDestination;
 *     int cellHopCount;
 *     int cellPath[100];
 *     int cellPathToDestination[100];
 * 
 *     int ttl;
 *     HelloInfo helloData;
 *     CLAnnouncementInfo clAnnouncementData;
 *     NodeInfo nodeInfoData;
 * 
 *     LinkRequestInfo linkRequestData;
 *     CLCommandInfo clCommandData;
 *     NCLConfirmInfo nclCommandData;
 *     RoutingUpdateInfo routingUpdateData[7];
 *     CHAnnouncementInfo chAnnouncementData;
 *     int nextHopId;
 *     CellHopAnnouncementInfo cellHopAnnouncementData;
 *     SensorData sensorData;
 * }
 * </pre>
 */
class CellularRoutingPacket : public ::RoutingPacket
{
  protected:
    int packetType;
    int clusterHead;
    int cellSent;
    int cellNext;
    int cellNextNext;
    int cellSource;
    int cellDestination;
    int cellHopCount;
    int cellPath[100];
    int cellPathToDestination[100];
    int ttl;
    HelloInfo helloData;
    CLAnnouncementInfo clAnnouncementData;
    NodeInfo nodeInfoData;
    LinkRequestInfo linkRequestData;
    CLCommandInfo clCommandData;
    NCLConfirmInfo nclCommandData;
    RoutingUpdateInfo routingUpdateData[7];
    CHAnnouncementInfo chAnnouncementData;
    int nextHopId;
    CellHopAnnouncementInfo cellHopAnnouncementData;
    SensorData sensorData;

  private:
    void copy(const CellularRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CellularRoutingPacket&);

  public:
    CellularRoutingPacket(const char *name=nullptr, short kind=0);
    CellularRoutingPacket(const CellularRoutingPacket& other);
    virtual ~CellularRoutingPacket();
    CellularRoutingPacket& operator=(const CellularRoutingPacket& other);
    virtual CellularRoutingPacket *dup() const override {return new CellularRoutingPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPacketType() const;
    virtual void setPacketType(int packetType);
    virtual int getClusterHead() const;
    virtual void setClusterHead(int clusterHead);
    virtual int getCellSent() const;
    virtual void setCellSent(int cellSent);
    virtual int getCellNext() const;
    virtual void setCellNext(int cellNext);
    virtual int getCellNextNext() const;
    virtual void setCellNextNext(int cellNextNext);
    virtual int getCellSource() const;
    virtual void setCellSource(int cellSource);
    virtual int getCellDestination() const;
    virtual void setCellDestination(int cellDestination);
    virtual int getCellHopCount() const;
    virtual void setCellHopCount(int cellHopCount);
    virtual unsigned int getCellPathArraySize() const;
    virtual int getCellPath(unsigned int k) const;
    virtual void setCellPath(unsigned int k, int cellPath);
    virtual unsigned int getCellPathToDestinationArraySize() const;
    virtual int getCellPathToDestination(unsigned int k) const;
    virtual void setCellPathToDestination(unsigned int k, int cellPathToDestination);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual HelloInfo& getHelloData();
    virtual const HelloInfo& getHelloData() const {return const_cast<CellularRoutingPacket*>(this)->getHelloData();}
    virtual void setHelloData(const HelloInfo& helloData);
    virtual CLAnnouncementInfo& getClAnnouncementData();
    virtual const CLAnnouncementInfo& getClAnnouncementData() const {return const_cast<CellularRoutingPacket*>(this)->getClAnnouncementData();}
    virtual void setClAnnouncementData(const CLAnnouncementInfo& clAnnouncementData);
    virtual NodeInfo& getNodeInfoData();
    virtual const NodeInfo& getNodeInfoData() const {return const_cast<CellularRoutingPacket*>(this)->getNodeInfoData();}
    virtual void setNodeInfoData(const NodeInfo& nodeInfoData);
    virtual LinkRequestInfo& getLinkRequestData();
    virtual const LinkRequestInfo& getLinkRequestData() const {return const_cast<CellularRoutingPacket*>(this)->getLinkRequestData();}
    virtual void setLinkRequestData(const LinkRequestInfo& linkRequestData);
    virtual CLCommandInfo& getClCommandData();
    virtual const CLCommandInfo& getClCommandData() const {return const_cast<CellularRoutingPacket*>(this)->getClCommandData();}
    virtual void setClCommandData(const CLCommandInfo& clCommandData);
    virtual NCLConfirmInfo& getNclCommandData();
    virtual const NCLConfirmInfo& getNclCommandData() const {return const_cast<CellularRoutingPacket*>(this)->getNclCommandData();}
    virtual void setNclCommandData(const NCLConfirmInfo& nclCommandData);
    virtual unsigned int getRoutingUpdateDataArraySize() const;
    virtual RoutingUpdateInfo& getRoutingUpdateData(unsigned int k);
    virtual const RoutingUpdateInfo& getRoutingUpdateData(unsigned int k) const {return const_cast<CellularRoutingPacket*>(this)->getRoutingUpdateData(k);}
    virtual void setRoutingUpdateData(unsigned int k, const RoutingUpdateInfo& routingUpdateData);
    virtual CHAnnouncementInfo& getChAnnouncementData();
    virtual const CHAnnouncementInfo& getChAnnouncementData() const {return const_cast<CellularRoutingPacket*>(this)->getChAnnouncementData();}
    virtual void setChAnnouncementData(const CHAnnouncementInfo& chAnnouncementData);
    virtual int getNextHopId() const;
    virtual void setNextHopId(int nextHopId);
    virtual CellHopAnnouncementInfo& getCellHopAnnouncementData();
    virtual const CellHopAnnouncementInfo& getCellHopAnnouncementData() const {return const_cast<CellularRoutingPacket*>(this)->getCellHopAnnouncementData();}
    virtual void setCellHopAnnouncementData(const CellHopAnnouncementInfo& cellHopAnnouncementData);
    virtual SensorData& getSensorData();
    virtual const SensorData& getSensorData() const {return const_cast<CellularRoutingPacket*>(this)->getSensorData();}
    virtual void setSensorData(const SensorData& sensorData);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CellularRoutingPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CellularRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CELLULARROUTINGPACKET_M_H

